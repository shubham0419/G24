// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(uuid())
  email       String        @unique
  name        String? // ?-> optional
  posts       Post[] //one to many
  comments    Comment[] //one to many
  enollements Enrollemnet[]
  sentTrns    Transaction[] @relation("sender")
  recieveTrns Transaction[] @relation("reciever")
  balance     Float         @default(0)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Transaction {
  id         String   @id @default(uuid())
  amount     Float
  senderId   String
  recieverId String
  sender     User     @relation("sender", fields: [senderId], references: [id])
  reciever   User     @relation("reciever", fields: [recieverId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Course {
  id           String        @id @default(uuid())
  name         String
  description  String
  enrollements Enrollemnet[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Enrollemnet {
  id       String @id @default(uuid())
  userId   String
  user     User   @relation(fields: [userId], references: [id])
  courseId String
  course   Course @relation(fields: [courseId], references: [id])
}

model Post {
  id          String    @id @default(uuid())
  title       String
  description String
  authorId    String
  author      User      @relation(fields: [authorId], references: [id])
  comments    Comment[]
}

model Comment {
  id       String @id @default(uuid())
  comment  String
  postId   String
  post     Post   @relation(fields: [postId], references: [id])
  authorId String
  author   User   @relation(fields: [authorId], references: [id])
}
